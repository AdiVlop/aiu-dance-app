-- FIX USER REGISTRATION
-- Script pentru repararea √ÆnregistrƒÉrii utilizatorilor noi

-- ========================================
-- 1. VERIFICƒÇ »òI REPARƒÇ TABELA PROFILES
-- ========================================

-- VerificƒÉ dacƒÉ tabela profiles existƒÉ »ôi are coloanele corecte
DO $$
BEGIN
    -- VerificƒÉ dacƒÉ tabela existƒÉ
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables 
                   WHERE table_schema = 'public' AND table_name = 'profiles') THEN
        
        CREATE TABLE public.profiles (
            id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
            email text UNIQUE NOT NULL,
            full_name text,
            role text DEFAULT 'student' CHECK (role IN ('student', 'instructor', 'admin')),
            is_active boolean DEFAULT true,
            avatar_url text,
            phone text,
            date_of_birth date,
            created_at timestamp with time zone DEFAULT now(),
            updated_at timestamp with time zone DEFAULT now()
        );
        
        RAISE NOTICE '‚úÖ Tabela profiles creatƒÉ cu succes';
    ELSE
        RAISE NOTICE '‚úÖ Tabela profiles existƒÉ deja';
    END IF;
END $$;

-- AdaugƒÉ coloanele lipsƒÉ dacƒÉ nu existƒÉ
DO $$
BEGIN
    -- is_active
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'profiles' AND column_name = 'is_active') THEN
        ALTER TABLE public.profiles ADD COLUMN is_active boolean DEFAULT true;
        RAISE NOTICE '‚úÖ Coloana is_active adƒÉugatƒÉ';
    END IF;
    
    -- avatar_url
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'profiles' AND column_name = 'avatar_url') THEN
        ALTER TABLE public.profiles ADD COLUMN avatar_url text;
        RAISE NOTICE '‚úÖ Coloana avatar_url adƒÉugatƒÉ';
    END IF;
    
    -- phone
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'profiles' AND column_name = 'phone') THEN
        ALTER TABLE public.profiles ADD COLUMN phone text;
        RAISE NOTICE '‚úÖ Coloana phone adƒÉugatƒÉ';
    END IF;
    
    -- date_of_birth
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'profiles' AND column_name = 'date_of_birth') THEN
        ALTER TABLE public.profiles ADD COLUMN date_of_birth date;
        RAISE NOTICE '‚úÖ Coloana date_of_birth adƒÉugatƒÉ';
    END IF;
    
    -- created_at
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'profiles' AND column_name = 'created_at') THEN
        ALTER TABLE public.profiles ADD COLUMN created_at timestamp with time zone DEFAULT now();
        RAISE NOTICE '‚úÖ Coloana created_at adƒÉugatƒÉ';
    END IF;
    
    -- updated_at
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'profiles' AND column_name = 'updated_at') THEN
        ALTER TABLE public.profiles ADD COLUMN updated_at timestamp with time zone DEFAULT now();
        RAISE NOTICE '‚úÖ Coloana updated_at adƒÉugatƒÉ';
    END IF;
END $$;

-- ========================================
-- 2. ACTIVEAZƒÇ RLS PENTRU PROFILES
-- ========================================

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- EliminƒÉ policies existente pentru a evita conflictele
DROP POLICY IF EXISTS "profiles_policy" ON public.profiles;
DROP POLICY IF EXISTS "Users can view own profile" ON public.profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON public.profiles;

-- CreeazƒÉ policy simplƒÉ pentru profiles
CREATE POLICY "profiles_policy" ON public.profiles FOR ALL USING (
    auth.uid() = id OR 
    (SELECT auth.jwt() ->> 'role') = 'admin'
);

-- ========================================
-- 3. CREEAZƒÇ TABELA WALLETS PENTRU UTILIZATORI NOI
-- ========================================

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables 
                   WHERE table_schema = 'public' AND table_name = 'wallets') THEN
        
        CREATE TABLE public.wallets (
            id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
            user_id uuid UNIQUE REFERENCES public.profiles(id) ON DELETE CASCADE,
            balance numeric(10,2) DEFAULT 0.00,
            currency text DEFAULT 'RON',
            is_active boolean DEFAULT true,
            created_at timestamp with time zone DEFAULT now(),
            updated_at timestamp with time zone DEFAULT now()
        );
        
        RAISE NOTICE '‚úÖ Tabela wallets creatƒÉ cu succes';
    ELSE
        RAISE NOTICE '‚úÖ Tabela wallets existƒÉ deja';
    END IF;
END $$;

-- RLS pentru wallets
ALTER TABLE public.wallets ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "wallets_policy" ON public.wallets;
CREATE POLICY "wallets_policy" ON public.wallets FOR ALL USING (
    auth.uid() = user_id OR 
    (SELECT auth.jwt() ->> 'role') = 'admin'
);

-- ========================================
-- 4. CREEAZƒÇ FUNC»öIA PENTRU PROFILE AUTOMAT
-- ========================================

CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    -- CreeazƒÉ profile automat c√¢nd se √ÆnregistreazƒÉ un user
    INSERT INTO public.profiles (id, email, full_name, role, is_active, created_at, updated_at)
    VALUES (
        new.id,
        new.email,
        COALESCE(new.raw_user_meta_data ->> 'full_name', new.email),
        COALESCE(new.raw_user_meta_data ->> 'role', 'student'),
        true,
        now(),
        now()
    )
    ON CONFLICT (id) DO UPDATE SET
        email = EXCLUDED.email,
        full_name = COALESCE(EXCLUDED.full_name, profiles.full_name),
        updated_at = now();
    
    -- CreeazƒÉ wallet automat
    INSERT INTO public.wallets (user_id, balance, currency, is_active, created_at, updated_at)
    VALUES (
        new.id,
        0.00,
        'RON',
        true,
        now(),
        now()
    )
    ON CONFLICT (user_id) DO NOTHING;
    
    RETURN new;
END;
$$;

-- ========================================
-- 5. CREEAZƒÇ TRIGGER PENTRU PROFILE AUTOMAT
-- ========================================

-- EliminƒÉ trigger-ul existent
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

-- CreeazƒÉ trigger nou
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- ========================================
-- 6. NOTƒÇ PENTRU CONFIGURAREA EMAIL
-- ========================================

-- NOTƒÇ: Pentru a dezactiva confirmarea email, mergi √Æn Supabase Dashboard:
-- Authentication ‚Üí Settings ‚Üí Email confirmations ‚Üí OFF
-- Authentication ‚Üí Settings ‚Üí Enable email confirmations ‚Üí OFF

-- ========================================
-- 7. VERIFICARE FINALƒÇ
-- ========================================

DO $$
DECLARE
    profiles_exists boolean;
    wallets_exists boolean;
    trigger_exists boolean;
    profile_count integer;
BEGIN
    -- VerificƒÉ tabela profiles
    SELECT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_name = 'profiles'
    ) INTO profiles_exists;
    
    -- VerificƒÉ tabela wallets
    SELECT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_name = 'wallets'
    ) INTO wallets_exists;
    
    -- VerificƒÉ trigger-ul
    SELECT EXISTS (
        SELECT 1 FROM information_schema.triggers 
        WHERE trigger_name = 'on_auth_user_created'
    ) INTO trigger_exists;
    
    -- NumƒÉrƒÉ profiles
    SELECT count(*) FROM public.profiles INTO profile_count;
    
    RAISE NOTICE '‚úÖ VERIFICARE √éNREGISTRARE:';
    RAISE NOTICE '   - Tabela profiles: %', profiles_exists;
    RAISE NOTICE '   - Tabela wallets: %', wallets_exists;
    RAISE NOTICE '   - Trigger automat: %', trigger_exists;
    RAISE NOTICE '   - Utilizatori existen»õi: %', profile_count;
    
    IF profiles_exists AND wallets_exists AND trigger_exists THEN
        RAISE NOTICE 'üéâ √énregistrarea ar trebui sƒÉ func»õioneze acum!';
    ELSE
        RAISE NOTICE '‚ùå √éncƒÉ sunt probleme cu √Ænregistrarea';
    END IF;
END $$;

-- ========================================
-- FINAL
-- ========================================

DO $$
BEGIN
    RAISE NOTICE 'üéâ Script FIX_USER_REGISTRATION completat!';
    RAISE NOTICE 'üìù Acum po»õi testa √Ænregistrarea utilizatorilor noi!';
END $$;
